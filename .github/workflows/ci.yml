name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  run-tests:
    runs-on: ubuntu-latest
    env:
      CI: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start FastAPI API in background
        run: |
          nohup uvicorn scripts.inference_api:app --host 0.0.0.0 --port 8000 &
          sleep 5

      - name: Wait for FastAPI to be ready
        run: |
          for i in {1..10}; do
            curl -s http://localhost:8000/health && break
            echo "Waiting for API..." && sleep 2
          done

      - name: Run test_logger_utils.py (unit test)
        run: pytest tests/test_logger_utils.py

      - name: Run test_secrets_manager.py (unit test)
        run: pytest tests/test_secrets_manager.py

      - name: Run test_algorand_utils.py (unit test)
        run: pytest tests/test_algorand_utils.py

      - name: Run test_model_registry.py (unit test)
        run: pytest tests/test_model_registry.py

      - name: Run test_blockchain_publish.py (unit test)
        run: pytest tests/test_blockchain_publish.py

      - name: Run test_api.py (unit test)
        run: pytest tests/test_api.py

      - name: Run test_sample_property.py (unit test)
        run: pytest tests/test_sample_property.py

      - name: Run test_e2e_sanity_check.py (integration test)
        run: python tests/test_e2e_sanity_check.py

    deploy-backend:
      needs: run-tests
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    env:
      AWS_REGION: us-east-1
      ECR_REPO: 035754837020.dkr.ecr.us-east-1.amazonaws.com/ai-oracle-api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        run: |
          docker build -t ai-oracle-api .
          docker tag ai-oracle-api:latest $ECR_REPO:latest
          docker push $ECR_REPO:latest

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          service: ai-oracle-service
          cluster: ai-oracle-cluster
          wait-for-service-stability: true
