name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CI: "true"
  AWS_REGION: us-east-1
  ECR_REPO: 035754837020.dkr.ecr.us-east-1.amazonaws.com/ai-oracle-api
  IMAGE_TAG: latest

jobs:
  generate-dataset:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install jupyter pandas pyarrow tqdm

      - name: Execute 01_generate_dataset notebook
        run: |
          jupyter nbconvert \
            --to notebook \
            --execute notebooks/01_generate_dataset.ipynb \
            --output executed_01_generate_dataset.ipynb \
            --ExecutePreprocessor.timeout=600

      - name: Upload data quality report
        uses: actions/upload-artifact@v4
        with:
          name: data-quality-report
          path: ../logs/quality_report.json
+     - name: Upload data quality report
+       uses: actions/upload-artifact@v4
+       with:
+         name: data-quality-report
+         path: data/data_quality_report.json


  train-and-evaluate:
    needs: generate-dataset
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download cleaned dataset
        uses: actions/download-artifact@v3
        with:
          name: cleaned-dataset
          path: data

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov shap

      - name: Train model, generate intervals, monitoring & SHAP
        run: |
          python - <<'PYCODE'
          import json, joblib, logging
          from notebooks.03_train_model import (
              final_model, X_train, X_test, y_train, y_test,
              mae, rmse, r2, coverage, avg_width,
              train_quantile_models, predict_with_intervals,
              generate_model_monitoring_metadata, generate_shap_explanations
          )
          logging.basicConfig(level=logging.INFO)

          # Assertions
          assert mae < 100, f"MAE troppo alto: {mae}"
          assert coverage >= 0.85, f"Coverage interval troppo basso: {coverage:.2%}"

          # Save model
          joblib.dump(final_model, 'models/final_model.pkl')

          # Prediction intervals
          q_models = train_quantile_models(X_train, y_train, preprocessor=final_model.named_steps['preprocessor'], quantiles=[0.05,0.5,0.95])
          intervals = predict_with_intervals(q_models, X_test)
          intervals.to_csv('models/prediction_intervals.csv', index=False)

          # Monitoring metadata
          monitoring = generate_model_monitoring_metadata(final_model, X_train, y_train, X_test, y_test)
          with open('models/monitoring_metadata.json','w') as f:
              json.dump(monitoring, f, indent=2)

          # SHAP explainability
          shap_imp = generate_shap_explanations(final_model, X_test, sample_size=100)
          shap_imp.to_csv('models/shap_importance.csv', index=False)

          # Model metadata JSON
          metadata = {
            'mae': mae, 'rmse': rmse, 'r2': r2,
            'coverage': coverage, 'avg_interval_width': avg_width
          }
          with open('models/model_metadata.json','w') as f:
              json.dump(metadata, f, indent=2)

          logging.info("âœ… Training & evaluation complete")
          PYCODE

      - name: Run unit tests & coverage
        run: |
          pytest --maxfail=1 --disable-warnings --cov=notebooks --cov-fail-under=80

      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            models/final_model.pkl
            models/model_metadata.json
            models/prediction_intervals.csv
            models/monitoring_metadata.json
            models/shap_importance.csv

  build-and-push-image:
    needs: train-and-evaluate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker push $ECR_REPO:$IMAGE_TAG

  deploy-to-prod:
    needs: build-and-push-image
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}

      - name: Pull and restart container
        run: |
          docker login -u AWS -p $(aws ecr get-login-password --region ${{ env.AWS_REGION }}) ${{ env.ECR_REPO }}
          docker pull $ECR_REPO:$IMAGE_TAG
          docker stop oracle-api || true
          docker rm oracle-api || true
          docker run -d --name oracle-api -p 80:8000 $ECR_REPO:$IMAGE_TAG
